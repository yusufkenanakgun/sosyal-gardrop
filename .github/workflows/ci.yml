name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # ðŸ§ª CI iÃ§inde Postgres servisi
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # TÃ¼m adÄ±mlar iÃ§in DB URL (Prisma ve app build'in gÃ¶rmesi iÃ§in)
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Node + pnpm
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.19.0
          run_install: false

      - name: Show tool versions
        run: |
          node -v
          pnpm -v
          which pnpm

      # pnpm store cache
      - name: Get pnpm store path
        id: pnpm-store
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # (Opsiyonel) psql ile DB'ye ping atÄ±p hazÄ±r bekle
      - name: Install psql client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if PGPASSWORD=postgres psql -h localhost -U postgres -d testdb -c "select 1" >/dev/null 2>&1; then
              echo "Postgres is up"; exit 0
            fi
            echo "Waiting for Postgres..."; sleep 2
          done
          echo "Postgres did not become ready in time"; exit 1

      # Prisma client tÃ¼rleri gerekli ise (genelde gerekiyor)
      - name: Prisma generate (@sg/api)
        run: pnpm --filter @sg/api prisma generate

      # Migration'larÄ± uygulamak istiyorsan aÃ§ (seed/e2e senaryolarÄ±nda gerekir)
      # - name: Prisma migrate deploy (@sg/api)
      #   run: pnpm --filter @sg/api prisma migrate deploy

      # Turborepo cache
      - name: Cache turborepo
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            **/.turbo
          key: ${{ runner.os }}-turbo-${{ github.ref }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ github.ref }}
            ${{ runner.os }}-turbo-

      # Ortam deÄŸiÅŸkenleri
      - name: Set CI envs
        run: |
          echo "NEXT_TELEMETRY_DISABLED=1" >> $GITHUB_ENV
          echo "TURBO_TELEMETRY_DISABLED=1" >> $GITHUB_ENV
          echo "NODE_OPTIONS=--max-old-space-size=4096" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      # Lint / Typecheck / Build
      - name: Lint
        run: pnpm -w lint

      - name: Typecheck
        run: pnpm -w typecheck

      - name: Build
        run: pnpm -w build
