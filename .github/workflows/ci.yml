name: CI (Lint / Typecheck / Build)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: ubuntu-latest
    name: Lint • Typecheck • Build

    env:
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: "production"
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/sw_dev_dummy"
      REDIS_URL: "redis://localhost:6379"
      S3_ENDPOINT: "http://localhost:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
      S3_BUCKET: "sw-media"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 🔹 1️⃣ Önce pnpm'i kur
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      # 🔹 2️⃣ Ardından Node'u kur (cache ile birlikte)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      # 🔹 3️⃣ PATH kontrolü (debug amaçlı)
      - name: Verify pnpm installation
        run: |
          which pnpm
          pnpm --version

      # 🔹 4️⃣ Cache turbo
      - name: Restore Turbo Cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-

      # 🔹 5️⃣ Bağımlılıkları yükle
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 🔹 6️⃣ Lint
      - name: Lint
        run: pnpm -w lint

      # 🔹 7️⃣ Typecheck
      - name: Typecheck
        run: pnpm -w typecheck

      # 🔹 8️⃣ Prisma generate (api paketi)
      - name: Prisma Generate
        run: pnpm --filter @sg/api prisma:gen

      # 🔹 9️⃣ Build
      - name: Build
        run: pnpm -w build

      # 🔹 10️⃣ Cache kaydet
      - name: Save Turbo Cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ github.sha }}
